action:
  type: object
  in: body
  description: |
    A structured definition of an action object.

action_action:
  type: string
  in: action
  description: |
    A string representation of the action for execution.

action_name:
  type: string
  in: body
  description: |
    The name of an action object.

action_name_query:
  type: string
  in: query
  optional: True
  description: |
    Filters the response by the action name associated with an event.
    Use this filter multiple times to filter by multiple actions.

action_request:
  type: object
  in: body
  description: |
    A structured definition of an action to be executed. The object is
    usually expressed as::

      <action_name>: {
        <param_1>: <value_1>
        <param_2>: <value_2>
        ...
      }

    The ``<action_name>`` indicates the requested action while the ``<param>``
    keys provide the associated parameters to the action. Each individual
    action has its own set of parameters.

adjustment_max_size:
  type: integer
  in: action
  optional: true
  description: |
    The value to be set as the new ``max_size`` of the cluster.

adjustment_min_size:
  type: integer
  in: action
  optional: true
  description: |
    The value to be set as the new ``min_size`` of the cluster.

adjustment_min_step:
  type: integer
  in: action
  optional: true
  description: |
    When ``adjustment_type`` is set to ``CHANGE_IN_PERCENTAGE``, often times
    the computed value is a float which could be less than 1.0. The
    ``min_step`` can be used to specify that at least this number of nodes will
    be added or removed.

adjustment_number:
  type: number
  in: action
  optional: true
  description: |
    The number of adjustment. The interpretion of the value depends on the
    value of the ``adjustment_type`` parameter. This parameter is mandatory
    when ``adjustment_type`` is specified. Otherwise, it is optional.

    When ``adjustment_type`` is specified as ``CHANGE_IN_PERCENTAGE``, the
    value of this parameter can be a float number, otherwise it has to be an
    integer.

adjustment_strict:
  type: bool
  in: action
  optional: true
  default: false
  description: |
    There are cases where the computed number of nodes to adjust will break
    the size constraints of a cluster, i.e. its ``min_size`` or ``max_size``
    property. If this is the case, the ``strict`` parameter can further
    instructs the senlin engine whether the resize should be done on a best
    effort basis. If the value is set to True, senlin engine will perform the
    resize operation while respecting the cluster's size constraints.
    Otherwise, if the computed adjustment will break the size constraints, the
    resize request will be directly rejected.

adjustment_type:
  type: string
  in: action
  optional: true
  description: |
    The type of size adjustment. The valid values are:

    - ``EXACT_CAPACITY``: The adjustment number specified is to be interpreted
      as the targeted ``desired_capacity``. This value has to be a non-negative
      integer.
    - ``CHANGE_IN_CAPACITY``: The adjustment number specified is to be treated
      as the number of nodes to add or remove. The value has to be a non-zero
      integer. A positive number can be used to specify the number of nodes to
      add while a negative number can be specified to indicate the number of
      nodes to remove.
    - ``CHANGE_IN_PERCENTAGE``: The adjustment number will be interpreted as
      a percentile relative to a cluster's current ``desired_capacity``. The
      adjustment number can be a positive or negative float value.

    This parameter is optional when a resize request is only about changing the
    ``min_size`` and/or ``max_size`` of the cluster. Otherwise, it is required.
    When this paramter is specified, the ``number`` parameter has to be
    provided as well.

check_params:
  type: object
  in: action
  optional: true
  description: |
    The optional parameters provided to a cluster check operation. The detailed
    keys and values are not checked at the moment.

cluster:
  type: object
  in: body
  description: |
    The structured definition of a cluster object.

cluster_data:
  type: object
  in: cluster
  description: |
    The structured data associated with the cluster.

cluster_id:
  type: UUID
  in: cluster
  description: |
    The UUID of the cluster object.

cluster_id_url:
  type: string
  in: URL
  description: |
    The name, UUID or short-UUID of a cluster object.

cluster_member_nodes:
  type: list
  in: action
  optional: false
  description: |
    The candidate nodes to be added to or removed from a cluster. The meaning
    of the parameter is depended on the action requested.

    Each item in the list can be the name, the short-ID or the UUID of a node.

cluster_name:
  type: string
  in: cluster
  description: |
    The name of the cluster object.

cluster_policies:
  type: list
  in: body
  description: |
    A list of cluster_policy objects.

cluster_policies_property:
  type: list
  in: cluster
  description: |
    A list of UUIDs of the policies attached to current cluster.

cluster_policy:
  type: object
  in: body
  description: |
    The structured description of a cluster_policy object.

cluster_policy_enabled:
  type: bool
  in: cluster_policy
  description: |
    Whether the policy is enabled on the attached cluster.

cluster_policy_id:
  type: UUID
  in: cluster_policy
  description: |
    The UUID of a cluster_policy object.

cluster_nodes:
  type: list
  in: cluster
  description: |
    A list of the UUIDs of node objects which are members of the current
    cluster.

cluster_policy_property:
  type: list
  in: cluster
  description: |
    A list of the UUIDs of policy objects which are attached to the current
    cluster.

cluster_profile_id:
  type: UUID
  in: cluster
  description: |
    The UUID of the profile object referenced by the current cluster.

cluster_profile_name:
  type: string
  in: cluster
  description: |
    The name of the profile object referenced by the current cluster.

cluster_status:
  type: string
  in: cluster
  description: |
    The string representation of the current status of the cluster.

clusters:
  type: list
  in: body
  description: |
    A list of cluster objects.

created_at:
  type: string
  in: body
  description: |
    The date and time when the resource was created. The date and time stamp
    format is ISO8601: ``CCYY-MM-DDThh:mm:ssZ``. For example:
    ``2016-01-18T00:00:00Z``

desired_capacity:
  type: integer
  in: cluster
  description: |
    The desired capacity of a cluster. When creating a cluster, this value is
    set to 0 by default.

domain:
  type: UUID
  in: body
  description: |
    The ID of the domain a resource is created in.

enabled_query:
  type: string
  in: query
  optional: True
  description: |
    Filters the response by a policy enabled status on the cluster.

event:
  type: object
  in: body
  description: |
    The structured description of an event object.

events:
  type: list
  in: body
  description: |
    A list of event objects.

event_id:
  type: UUID
  in: event
  description: |
    The UUID of an event object.

event_id_url:
  type: string
  in: URL
  description: |
    The name, UUID or short-UUID of an event object.

event_level:
  type: string
  in: event
  description: |
    The level of an event object.

event_status:
  type: string
  in: event
  description: |
    The current status of the object associated with the event.

event_timestamp:
  type: string
  in: event
  description: |
    The date and time when the event was generated. The date and time stamp
    format is ISO8601: ``CCYY-MM-DDThh:mm:ssZ``.

global_project:
  type: bool
  in: query
  default: False
  optional: True
  description: |
    Indicates whether to include resources for all projects or resources for
    the current project in the response.

    If you are an administrative user and you set this value to ``true``, the
    call returns all resources from all projects. Default is ``false``, which
    returns only resources in the current project.

cluster_init_at:
  type: string
  in: cluster
  description: |
    The date and time when the cluster object was initialized. The date and
    time stamp format is ISO8601: ``CCYY-MM-DDThh:mm:ssZ``. For example:
    ``2016-01-18T00:00:00Z``

limit:
  type: int
  in: query
  optional: True
  description: |
    Requests a page size of resources. Returns a number of resources up to the
    limit value. Use the `limit` parameter to make an initial limited request
    and use the ID of the last-seen resource from the response as the `marker`
    parameter value in a subsequent limited request.

location:
  type: string
  in: header
  description: |
    For asynchronous object operations, the ``location`` header contains a
    string that can be interpreted as a relative URI from where users can
    track the progress of the action triggered.

marker:
  type: UUID
  in: query
  optional: True
  description: |
    The ID of the last-seen resource. Use the `limit` parameter to make an
    initial limited request and use the ID of the last-seen resource from the
    response as the `marker` parameter value in a subsequent limited request.

max_size:
  type: integer
  in: cluster
  description: |
    The maximum size of a cluster, i.e. the maximum number of nodes that can
    be members of the cluster. A value of -1 means that the cluster doesn't
    have an upper bound regarding the number of member nodes.

metadata:
  type: object
  in: body
  description: |
    A collection of key-value pairs associated with an object.

microversion:
  type: string
  in: header
  optional: True
  description: |
    API microversion request. It takes the form of
    ``OpenStack-API-Version: clustering 1.0``, where ``1.0`` is the requested
    API version.

min_size:
  type: integer
  default: 0
  in: cluster
  description: |
    The minmum size of a cluster, i.e. the minimum number of nodes that can
    be members of the cluster.

name:
  type: string
  in: body
  description:
    The name of the resource.

name_query:
  type: string
  in: query
  optional: True
  description: |
    Filters the response by the ``name`` property of the resource.

obj_id:
  type: UUID
  in: event
  description: |
    The UUID of an object associated with the event.

obj_id_query:
  type: string
  in: query
  optional: True
  description: |
    Filters the response by the ``ID`` of object associated with an event.
    Use this filter multiple times to filter by multiple objects.

obj_name:
  type: string
  in: event
  description: |
    The name of an object associated with the event.

obj_name_query:
  type: string
  in: query
  optional: True
  description: |
    Filters the response by the ``name`` of object associated with an event.
    Use this filter multiple times to filter by multiple objects.

obj_type:
  type: string
  in: event
  description: |
    The type of an object associated with the event.

obj_type_query:
  type: string
  in: query
  optional: True
  description: |
    Filters the response by the ``type`` of object associated with an event.
    Use this filter multiple times to filter by multiple objects. A valid
    value is ``CLUSTER`` or ``NODE``.

policy_type:
  type: object
  in: body
  description: |
    A structured description of a policy type.

policy_type_name:
  type: string
  in: policy_type
  description: |
    The name of the policy type.

policy_type_schema:
  type: object
  in: policy_type
  description: |
    The schema of a policy type. The schema of a policy type varies a lot
    based on the specific type implementation.

policy_type_url:
  type: string
  in: URL
  optional: False
  description: |
    The name of a policy type.

policy_types:
  type: list
  in: body
  description: |
    A list of policy_type objects.

policies:
  type: list
  in: body
  description: |
    A list of policy objects.

policy:
  type: object
  in: body
  description: |
    A structured description of a policy object.

policy_data:
  type: object
  in: policy
  description: |
    A structured representation of data associated with a policy object.

policy_id:
  type: UUID
  in: policy
  description: |
    The UUID of a policy object.

policy_id_url:
  type: string
  in: URL
  description: |
    The name, UUID or short-UUID of a policy object.

policy_name:
  type: string
  in: body
  description: |
    The name of a policy object.

policy_spec:
  type: object
  in: policy
  description: |
    The detailed specification of a policy object.

policy_type_property:
  type: string
  in: policy
  description: |
    The ``type`` property of a policy object.

profile:
  type: object
  in: body
  description: |
    A structured description of a profile object.

profile_id:
  type: UUID
  in: profile
  description: |
    The UUID of a profile.

profile_id_url:
  type: string
  in: URL
  description: |
    The name, UUID or short-UUID of a profile.

profile_spec:
  type: object
  in: profile
  description: |
    The detailed specification of the profile.

profile_type:
  type: object
  in: body
  description: |
    A structured description of a profile type.

profile_type_name:
  type: string
  in: profile_type
  description: |
    The name of the profile type.

profile_type_property:
  type: string
  in: body
  description: |
    The ``type`` property of a profile.

profile_type_schema:
  type: object
  in: profile_type
  description: |
    The schema of a profile type. The schema of a profile type varies
    a lot based on the specific type implementation. All profile types
    share the ``context`` property which is a dictionary for customizing
    the request context to authenticate with a backend service. A common
    usage of this property is to set the ``region_name`` in the dictionary
    so that a node can be created in the specified region. All other
    properties are defined by a particular profile type implementation.

profile_type_url:
  type: string
  in: URL
  optional: False
  description: |
    The name of a profile type.

profile_types:
  type: list
  in: body
  description: |
    A list of profile_type objects.

profiles:
  type: list
  in: body
  description: |
    A list for profile objects.

project:
  type: UUID
  in: body
  description: |
    The ID of the project a resource is created in.

receiver:
  type: object
  in: body
  description: |
    The structured definition of a receiver object.

receivers:
  type: list
  in: body
  description: |
    A list for receiver objects.

receiver_action:
  type: string
  in: receiver
  description: |
    The action to initiate when the receiver is triggered. A valid value
    should be the name of an action that can be applied on a cluster.

receiver_action_query:
  type: string
  in: query
  optional: True
  description: |
    Filters the response by the action targeted by the receiver.

receiver_actor:
  type: dict
  in: receiver
  description: |
    A map of key and value pairs to use for authentication. If omitted,
    the requester is assumed to be the actor.

receiver_channel:
  type: dict
  in: receiver
  description: |
    The target to be used by user to trigger a receiver. For webhook type
    of receiver, channel is a webhook URL.

receiver_id:
  type: UUID
  in: receiver
  description: |
    The UUID of the receiver object.

receiver_id_url:
  type: string
  in: URL
  description: |
    The name, UUID or short-UUID of a receiver object.

receiver_params:
  type: dict
  in: receiver
  description: |
    A map of key and value pairs to use for action creation. Some actions
    might require certain input parameters.

receiver_type:
  type: string
  in: receiver
  description: |
    The type of the receiver. The only valid value is webhook currently.

receiver_type_query:
  type: string
  in: query
  optional: True
  description: |
    Filters the response by the ``type`` property of the receiver.

recover_params:
  type: object
  in: action
  optional: true
  description: |
    The optional parameters provided to a cluster recover operation. The
    detailed keys and values are not checked at the moment.

request_id:
  type: UUID
  in: header
  optional: True
  description: |
    A unique ID for tracking service request. The request ID associated
    with the request by default appears in the service logs.

scale_count:
  type: integer
  in: action
  optional: true
  default: 1
  description: |
    The number of new nodes to add to or remove from the specified cluster.
    The interpretation is depending on the action requested. Default value is
    1.

sort:
  type: string
  in: query
  optional: True
  description: |
    Sorts the response by one or more attribute and optional sort direction
    combinations. A valid direction is ``asc`` (ascending) or ``desc``
    (descending). Default direction is ``asc`` (ascending).

    Specify the list as ``<key>[:<direction>]``.

    For example, the following query parameters in the URI sort the resources
    in the response by ``name`` in ascending order and then by ``status`` in
    descending order::

      GET /v1/clusters?sort=name:asc,status:desc

status_query:
  type: string
  in: query
  optional: True
  description: |
    Filters the resource collection by the ``status`` property.

status_reason:
  type: string
  description: |
    The string representation of the reason why the object has transited to
    its current status.

timeout:
  type: integer
  in: cluster
  description: |
    The default timeout value (in seconds) of cluster operations.

type_query:
  type: string
  in: query
  optional: True
  description: |
    Filters the response by the ``type`` property of the resource.

updated_at:
  type: string
  in: body
  description: |
    The date and time when the resource was last updated. The date and time
    stamp format is ISO8601: ``CCYY-MM-DDThh:mm:ssZ``. For example:
    ``2016-01-18T00:00:00Z``

user:
  type: UUID
  in: body
  description: |
    The ID of the user a resource is created by.

user_query:
  type: UUID
  in: query
  optional: True
  description: |
    Filters the response by the ``user`` property of the resource.

version:
  type: object
  in: body
  description: |
    The details about a major API version.

versions:
  type: list
  in: body
  description: |
    A list of supported major API versions.

version_id:
  type: string
  in: version
  description: |
    The string representation of an API version number, e.g. ``1.0``.

version_links:
  type: list
  in: version
  description: |
    A list of relative URLs to different version objects.

version_max_version:
  type: string
  in: version
  description: |
    The string representation of the maximum microversion supported.

version_media_types:
  type: list
  in: version
  description: |
    A list of content-type based media type request supported.

version_min_version:
  type: string
  in: version
  description: |
    The string representation of the minimum microversion supported.

version_status:
  type: string
  in: version
  description: |
    A string indicating the supporting status of the version.

version_updated:
  type: string
  in: version
  description: |
    The date and time when the version was last updated. The date and time
    stamp format is ISO8601: ``CCYY-MM-DDThh:mm:ssZ``. For example:
    ``2016-01-18T00:00:00Z``

version_url:
  type: string
  in: URL
  optional: False
  description: |
    A string indicating the major version of Clustering API.

webhook_id_url:
  type: UUID
  in: URL
  description: |
    The UUID of a webhook object.

webhook_params:
  type: dict
  in: query
  optional: True
  description: |
    The query string that forms the inputs to use for the targeted action.

webhook_version:
  type: string
  in: query
  description: |
    The webhook implementation version requested.
